// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiverApi.Db;

namespace RiverApi.Db.Migrations
{
    [DbContext(typeof(RiverApiContext))]
    [Migration("20200401082616_RemovedSectionIdFromLevelSpot")]
    partial class RemovedSectionIdFromLevelSpot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.HotSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("HotSpots");
                });

            modelBuilder.Entity("Models.LevelSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CreekKm")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Flow")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastMeasurement")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Level")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RiverId");

                    b.ToTable("LevelSpots");
                });

            modelBuilder.Entity("Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Flow")
                        .HasColumnType("float");

                    b.Property<double?>("Level")
                        .HasColumnType("float");

                    b.Property<int?>("LevelSpotId")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LevelSpotId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Models.River", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rivers");
                });

            modelBuilder.Entity("Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtLevelSpot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtLevelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LevelSpotId")
                        .HasColumnType("int");

                    b.Property<double?>("MaxFlow")
                        .HasColumnType("float");

                    b.Property<double?>("MaxLevel")
                        .HasColumnType("float");

                    b.Property<double?>("MidFlow")
                        .HasColumnType("float");

                    b.Property<double?>("MidLevel")
                        .HasColumnType("float");

                    b.Property<double?>("MinFlow")
                        .HasColumnType("float");

                    b.Property<double?>("MinLevel")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParkPutIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParkTakeOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PutIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiverId")
                        .HasColumnType("int");

                    b.Property<string>("SpotGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TakeOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelSpotId");

                    b.HasIndex("RiverId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Models.HotSpot", b =>
                {
                    b.HasOne("Models.Section", null)
                        .WithMany("HotSpots")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("Models.LevelSpot", b =>
                {
                    b.HasOne("Models.River", null)
                        .WithMany("LevelSpots")
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Measurement", b =>
                {
                    b.HasOne("Models.LevelSpot", null)
                        .WithMany("Measurements")
                        .HasForeignKey("LevelSpotId");
                });

            modelBuilder.Entity("Models.Section", b =>
                {
                    b.HasOne("Models.LevelSpot", "LevelSpot")
                        .WithMany()
                        .HasForeignKey("LevelSpotId");

                    b.HasOne("Models.River", "River")
                        .WithMany("Sections")
                        .HasForeignKey("RiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
